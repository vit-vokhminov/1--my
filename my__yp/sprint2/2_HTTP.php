<?php include '../../include/header.php'; ?>



<div class="linear" id="Hello">

    <h2>HTTP</h2>

    <p><b>HTTP (HyperText Transfer Protocol — «протокол передачи гипертекста»)</b> — протокол прикладного уровня передачи данных (изначально — в виде гипертекстовых документов в формате HTML), в настоящий момент используется для передачи произвольных данных.</p>

    <p>В этом определении имеются в виду версии протокола до HTTP/2. Про HTTP/2 будем говорить отдельно.</p>

    <p>HTTP — это самый верхний уровень модели OSI. Если для вас слова «модель» и «OSI» что-то новое или же просто хотите освежить память — как минимум
        <a target="_blank" href="https://wiki.merionet.ru/seti/18/model-osi-eto-prosto/">прочитайте это описание</a>.</p>

    <img src="img/1_osi.png" alt="">
    
    <p>В начале «общения» клиента и сервера, клиент отправляет запрос на установление соединения. Идёт так называемое «тройное рукопожатие». Если соединение прошло успешно, между ними начинается обмен информацией.</p>

    <img src="img/S2_07_01_http_1598026197.png" alt="">

    <p>Адрес ресурса состоит из нескольких частей:</p>

    <img src="img/S2_07_02_http_1598026199.png" alt="">

    <br>

    <p><b>Свойства</b></p>

    <ul class="marker">
        <li><code>GET</code> — получение ресурса,</li>
        <li><code>POST</code> — создание ресурса,</li>
        <li><code>DELETE</code> — удаление ресурса,</li>
        <li><code>PUT</code> — изменение ресурса. Про отличие от PATCH можно почитать в стандарте, описанном выше по ссылке у RFC,</li>
        <li><code>HEAD</code> — запрашивает ресурс так же, как и метод GET, но без тела ответа.</li>
        <li><code>CONNECT</code> — устанавливает "туннель" к серверу, определённому по ресурсу.</li>
        <li><code>OPTIONS</code> — используется для описания параметров соединения с ресурсом.</li>
        <li><code>TRACE</code> — выполняет вызов возвращаемого тестового сообщения с ресурса.</li>
        <li><code>PATCH</code> — используется для частичного изменения ресурса.</li>
    </ul>

    <br>

    <p>Код ответа (состояния) HTTP показывает, был ли успешно выполнен определённый HTTP запрос. Коды сгруппированы в 5 классов:</p>

    <ul class="marker">
        <li>Информационные 100 - 199</li>
        <li>Успешные 200 - 299</li>
        <li>Перенаправления 300 - 399</li>
        <li>Клиентские ошибки 400 - 499</li>
        <li>Серверные ошибки 500 - 599</li>
    </ul>

    <br>
    <p><b>Stateless</b></p>

    <p><b>HTTP — Stateless протокол.</b> Он не хранит состояние клиента между запросами, всё состояние целиком описывается в каждом запросе. Про stateless management можно
        <a target="_blank" href="https://tools.ietf.org/html/rfc6265">прочитать в RFC</a>.</p>

    <p>Некоторые особенности куки:</p>

    <ul class="marker">
        <li>куки ставятся на конкретный домен,</li>
        <li>браузер должен хранить как минимум 4096 байт cookies,</li>
        <li>имена нечувствительны к регистру.</li>
    </ul>

    <p>Сервер устанавливает клиенту куки в ответе на запрос через специальный заголовок <code>Set-Cookie: Set-Cookie: name=value</code>. Далее, клиент должен отправлять серверу куку через заголовок <code>Cookie: Cookie: name=value</code>.</p>

    <p>Подробнее про заголовок можно <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie">почитать на MDN</a>.</p>

    <p>Где применяются куки:</p>

    <ul class="marker">
        <li>аутентификация пользователей. Про отличие идентификации, аутентификации и авторизации можно прочитать здесь,</li>
        <li>хранение настроек пользователей,</li>
        <li>сессия пользователя,</li>
        <li>сбор различной статистики,</li>
        <li>и многое другое.</li>
    </ul>

    <p>Сигнатура <code>Set-Cookie</code>:</p>

    <pre class="brush: js;">
        Set-Cookie: value
                    [; Expires=date]
                    [; Max-Age=age]
                    [; Domain=domain]
                    [; Path=path]
                    [; Secure]
                    [; HttpOnly]
    </pre>

    <p>Важные атрибуты — <code></code> и <code>httponly</code>.</p>

    <p>Атрибут <code>httponly</code> делает куки доступными только по HTTP-запросам. Доступ через JavaScript при этом запрещён.</p>

    <p>В браузере из JavaScript можно получить значение куки через <code>document.cookie</code>. Это открывает дверь злоумышленникам, которые охотятся за пользовательскими данными. Кука может быть «паспортом» пользователя в приложении, потому желательно не допускать кражу таких данных, либо делать так, чтобы кража была бесполезной. Про методы защиты будем говорить отдельно.</p>

    <p>Атрибут <code>httponly</code> усложняет задачу злоумышленникам. Да и в наше время куки очень редко нужны фронтенд-разработчикам — хватает других инструментов. Клиент не должен работать с куками.</p>

    <p>Атрибут <code>secure</code> говорит браузеру, что куку можно установить только при защищённом HTTPS-соединении. Если запрос приходит от HTTP, то браузер просто не поставит данную куку. Про HTTPS и SSL расскажем позднее.</p>

    <br>

    <h2>REST</h2>

    <p><b>REST (Representational State Transfer — «передача состояния представления») определяет такие понятия, как ресурсы, представление для ресурсов, идентификатор ресурсов, а также описывает требования к взаимодействию (кеширование, связанность).</b></p>

    <p><b>Семантика</b></p>

    <p><b>GET</b></p>

    <p>Получает состояние ресурса в одном из представлений (JSON, XML, HTML):</p>

    <pre class="brush: js;">
        GET /chats
        GET /chats/123
        GET /chats/123/messages
        GET /chats?limit=10

        200 Ok // Получили успешно

        404 Not found // Ресурс не найден
        400 Bad request /chats?limit=muahahaha // Запрос составлен клиентом некорректно
    </pre>

    <br>
    <p><b>POST</b></p>

    <p>Создаёт новый ресурс с начальным состоянием, когда сервис не знает его ID:</p>

    <pre class="brush: js;">
        POST /chats
        {
            "data": {...}
        }

        201 Created // Успешно создано

        409 Conflict // Такой документ уже есть (например, пользователь с таким email уже зарегистрирован)
    </pre>

    <br>
    <p><b>PUT</b></p>

    <p>Создаёт новый ресурс с начальным состоянием, когда сервис знает его ID. Целиком обновляет состояние текущего ресурса:</p>

    <pre class="brush: js;">
        PUT /chats/123
        PUT /chats/123/messages

        200 Ok // Выполнено успешно
        204 No content

        404 Not found // Ресурс не найден
    </pre>

    <br>
    <p><b>DELETE</b></p>

    <p>Удаляет существующий ресурс:</p>

    <pre class="brush: js;">
        DELETE /chats/123
        DELETE /chats/123/messages

        200 Ok
        204 No content

        404 Not found
    </pre>

    <br>
    <p><b>PATCH</b></p>

    <p>Частично обновляет состояние существующего ресурса:</p>

    <pre class="brush: js;">
        PATCH /chats/123

        200 Ok
        204 No content

        404 Not found
    </pre>

    <p><b>HEAD</b></p>

    <p>Запрашивает заголовки, чтобы проверить существование ресурса:</p>

    <pre class="brush: js;">
        HEAD /chats/123

        200 Ok

        404 Not found
    </pre>

    <br>
    <p><b>OPTIONS</b></p>

    <p>Запрашивает правила взаимодействия, например, доступные методы:</p>

    <pre class="brush: js;">
        OPTIONS /search

        204 No content
        Allow: OPTIONS, GET, HEAD

        POST /search

        405 Method not allowed
    </pre>

    <br>

    <p><b>WebSocket</b></p>

    <p><a target="_blank" href="https://learn.javascript.ru/websocket">«Современный учебник JavaScript»</a> — подробнее расскажем о WebSocket в следующих спринтах, а сейчас предлагаем с ним просто познакомиться и понять, зачем он нужен.</p>

</div>



<!--
<pre class="brush: js;">

</pre>

<ul class="marker">
    <li></li>
</ul>

v&ndash;                тире

&quot;                  двойная кавычка

-->


<!--

<div class="linear" id="use_strict">
    <h1>Строгий режим — "use strict"</h1>

    <h2>«use strict»</h2>


    <p>Например:</p>

    <pre class="brush: js;">
            "use strict";

            // этот код работает в современном режиме
            ...
        </pre>


    <p>На данный момент достаточно иметь общее понимание об этом режиме:</p>
    <ul class="ul_num">
        <li><code>111111</code> 2222222222222222</li>

    </ul>

</div>

-->



<?php include '../../include/footer.php'; ?>
