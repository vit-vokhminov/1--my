<?php include '../include/header.php'; ?>



<div class="linear" id="Hello">

    <p><b>Установка и настройка Git</b></p>

    <br>
    <p>Скачайте и установите Git:</p>

    <ul class="marker">
        <li><a target="_blank" href="https://git-scm.com/download/mac">на MacOS,</a></li>
        <li><a target="_blank" href="https://git-scm.com/download/linux">на Linux,</a></li>
        <li><a target="_blank" href="https://git-scm.com/download/win">на Windows.</a></li>
    </ul>

    <br>
    <p>После этого добавьте нового пользователя в Git:</p>

    <p><code>git config --global user.name "Stas Basov"</code> вводите своё имя или ник латиницей и в кавычках</p>

    <p><code>git config --global user.email stasbasov@yandex.ru</code> здесь нужно ввести свой реальный e-mail</p>

    <br>
    <p><b>Создание локального репозитория</b></p>

    <p>Любая локальная папка может стать репозиторием — хранилищем, где вместе с кодом хранится история его изменений и служебные файлы Git.</p>
    <p>Чтобы сделать репозиторий, откройте терминал, переместитесь в нужную папку и вызовите команду:</p>
    <p><code>git init </code></p>

    <br>
    <p>Командная строка сообщит, что репозиторий инициализирован. Чтобы проверить результат, вызовите команду:</p>
    <p><code>git status </code></p>

    <br>
    <p>Она покажет, что вы находитесь в репозитории, и Git видит файлы.</p>
    <p>Однако сейчас все файлы попадают в число «неотслеживаемых» — “Untracked files”. История их изменений не сохраняется.</p>

    <br>
    <p><b>Индекс — подготовка к версионированию</b></p>

    <p>Чтобы вести историю изменений, файлы нужно подготовить — добавить в индекс Git. Он служит для отслеживания изменений в репозитории. За это отвечает команда <code>git add</code> — она добавляет в индекс Git новые и изменившиеся файлы.
        <br>Аргументом служит имя файла:</p>
    <p><code>git add index.html </code></p>

    <br>
    <p>Чтобы добавить все файлы, есть специальная опция <code>--all</code>. Но на практике мы чаще используем сокращённую версию той же команды — <code>-A</code>:</p>
    <p><code>git add -A </code></p>

    <br>
    <p>Другой способ получить тот же результат — это добавить всю текущую папку:</p>
    <p><code>git add . </code></p>

    <br>
    <p>Команду <code>git add</code> следует вызывать как для новых файлов, так и для изменившихся с последнего запуска. И то и другое — изменения в репозитории.</p>

    <br>
    <p><b>Коммит — сохранение изменений</b></p>

    <br>
    <p>Чтобы зафиксировать изменения файлов, нужно сделать «коммит» (от англ. commit, фиксировать). Файлы, добавленные в индекс, фиксируются командой:</p>
    <p><code>git commit -m "мой первый коммит"</code></p>

    <br>
    <p>За опцией <code>-m</code> следует описание внесённых изменений.</p>

    <p>Когда мы фиксируем изменения в репозитории это похоже на групповой фотоснимок:</p>
    <ul class="marker">
        <li>Как людей перед снимком расставляют в группу, так и мы начинаем с добавления файлов в индекс — командой <code>git add</code>.</li>
        <li>Фотограф нажимает на кнопку, чтобы сделать снимок, — разработчик вызывает <code>git commit</code>. Фотографию подписывают, чтобы потом было легче вспомнить, что на ней изображено. Так же подписывают и коммит.</li>
    </ul>

    <br>
    <p>Чаще всего разработчики не добавляют новые файлы в индекс, а изменяют уже существующие. Тогда достаточно одной команды:</p>
    <p><code>git commit -am "x" </code></p>

    <br>
    <p>Эта команда пройдётся по изменившимся файлам индекса и добавит коммит с подписью “x”.</p>

    <br>
    <p><b>Ветки репозитория</b></p>

    <br>
    <p>Ветка — это изолированный поток разработки, в котором можно делать коммиты так, что их не видно из других веток.</p>
    <ul class="marker">
        <li>Если над разработкой трудятся несколько человек, каждый может работать в отдельной ветке и не мешать другим.</li>
        <li>Когда код разделён на стабильную и тестовую версии, создают соответствующие ветки. Основную разработку ведут в одной ветке, проверенные изменения переносят в ветку со стабильным кодом.</li>
    </ul>

    <br>
    <p>Ветка <code>master</code> создаётся автоматически, когда мы инициализируем Git и делаем первый коммит. Чтобы это проверить, введём:</p>
    <p><code>git branch</code> команда для просмотра веток</p>
    <p><code>* master</code> наша основная ветка, звёздочкой отмечено, в какой вы ветке сейчас</p>

    <br>
    <p>Чтобы создать новую ветку, используют команду <code>git branch <название_ветки></code>:</p>

    <p><code>git branch testing</code> создали новую ветку</p>
    <p><code>git branch</code> проверили, в какой ветке находимся</p>
    <p><code>testing</code> появилась новая ветка</p>
    <p><code>* master</code> но мы пока находимся в ветке master</p>

    <br>
    <p>Чтобы переключиться в ветку <code>testing</code>, введите команду <code>git checkout</code>:</p>

    <p><code>git checkout testing</code> переключились в ветку testing</p>
    <p><code>git branch</code> проверили</p>
    <p><code>* testing</code></p>
    <p><code>master</code></p>

    <br>
    <p>Чтобы влить код другой ветки в текущую, вызывают команду <code>git merge</code>:</p>

    <p><code>git checkout master</code> переходим в основную ветку</p>
    <p><code>git merge testing</code> переносим код из ветки testing в основную</p>

    <br>
    <p>Объединение веток ещё называют «мёрджем» (от англ. merge, «слияние»).</p>

    <br>
    <p><b>Важное изменение в GitHub</b></p>

    <p>Обратите внимание, что с октября 2020 года GitHub изменил название ветки по умолчанию с <code>master</code> на <code>main</code>. Об этом можно подробнее почитать в репозитории самого GitHub.
        Это не означает, что вы теперь не можете назвать ветку <code>master</code>. Всё так же можно запушить ветку с названием, какое нужно вам, и поменять ветку по умолчанию. Чтобы это сделать, необходимо изменить настройки репозитория. Подробности также найдёте в
        <a href="https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/changing-the-default-branch">документации</a>.</p>

    <br>
    <p><b>Коммит</b></p>

    <p><code>git add .</code></p>
    <p><code>git commit -m "Добавили свой index.html"</code></p>
    <p><code>git push -u origin master</code> Достаточно один раз привязать master-ветку и дальше просто делать <code>git push</code> из этой ветки</p>

</div>









<!--


v&ndash;                тире

&quot;                  двойная кавычка

-->


<!--

<div class="linear" id="use_strict">
    <h1>Строгий режим — "use strict"</h1>

    <h2>«use strict»</h2>


    <p>Например:</p>

    <pre class="brush: js;">
            "use strict";

            // этот код работает в современном режиме
            ...
        </pre>


    <p>На данный момент достаточно иметь общее понимание об этом режиме:</p>
    <ul class="ul_num">
        <li><code>111111</code> 2222222222222222</li>

    </ul>

</div>

-->



<?php include '../include/footer.php'; ?>
